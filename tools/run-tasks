#!/usr/bin/perl -w
package MT::Tool::RunTasks;

# Original: Movable Type run-periodic-tasks

use strict;
use lib  qw( extlib lib );
use base qw( MT::Tool );

sub usage { '[--task <comma,separated,task_id>]' }

sub help {
    return q {
        Do run_tasks but do not work_periodically.
        You can run_tasks specify the tasks ID.

        --task <comma,separated,task_id>
                      Optional: FuturePost,CleanTemporaryFiles...

    };
}

my ( $task );

sub options {
    return (
        'tasks=s'  => \$task,
    );
}

my $daemonize = 0;
my $sleep     = 5;
my $help      = 0;
my $load      = 10;
my $verbose   = 0;
my $scoreboard;
my $randomize_jobs = 0;
my $trace_objects  = 0;
require Getopt::Long;
Getopt::Long::GetOptions(
    'daemon'       => \$daemonize,
    'sleep=i'      => \$sleep,
    'load=i'       => \$load,
    'scoreboard=s' => \$scoreboard,
    'randomly'     => \$randomize_jobs,
    'verbose'      => \$verbose,
    'leak'         => \$trace_objects,
);

sub main {
    my $class = shift;
    my ( $verbose ) = $class->SUPER::main( @_ );
    my @tasks;
    if ( $task ) {
        @tasks = split( /,/, $task );
    }
    require MT::TheSchwartz;
    if ( $trace_objects ) {
        require Devel::Leak::Object;
        Devel::Leak::Object->import(qw{ GLOBAL_bless });
    }
    my $proc_process_table = eval {
        require Proc::ProcessTable;
        1;
    };
    $@ = undef;
    require MT::Bootstrap;
    require MT;
    my $mt = MT->new() or die MT->errstr;
    if ( defined( MT->config( 'RPTProcessCap' ) ) && $proc_process_table ) {
        my $t = new Proc::ProcessTable;
        my $rpt_count;
        foreach my $p ( @{ $t->table } ) {
            my $cmd = $p->cmndline;
            if ( ( $cmd =~ /^perl/ && $cmd =~ /run-workers/ ) || 
                 ( $cmd =~ /^perl/ && $cmd =~ /run-tasks/ ) ||
                 ( $cmd =~ /^perl/ && $cmd =~ /run-periodic-tasks/ ) ) {
                $rpt_count += 1;
            }
        }
        if ( $rpt_count > MT->config( 'RPTProcessCap' ) ) {
            $rpt_count = $rpt_count - 1;
            die "$rpt_count processes already running; cancelling rebuild_queue launch\n";
        }
    }
    if ( MT->config( 'RPTFreeMemoryLimit' ) ) {
        my $limit = MT->config( 'RPTFreeMemoryLimit' );
        if ( $limit and ! MT::TheSchwartz::_has_enough_swap( $limit ) ) {
            die
                "Free memory below RPT limit; cancelling rebuild_queue launch\n";
        }
    }
    if ( MT->config( 'RPTFreeSwapLimit' ) ) {
        my $swaplimit = MT->config( 'RPTSwapMemoryLimit' );
        if ( $swaplimit and ! MT::TheSchwartz::_has_enough_swap( $swaplimit ) ) {
            die
                "Free swap memory below RPT limit; cancelling rebuild_queue launch\n";
        }
    }
    $mt->{ vtbl }                 = {};
    $mt->{ is_admin }             = 0;
    $mt->{ template_dir }         = 'cms';
    $mt->{ user_class }           = 'MT::Author';
    $mt->{ plugin_template_path } = 'tmpl';
    $mt->run_callbacks( 'init_app', $mt );
    $mt->run_tasks( @tasks );
}

__PACKAGE__->main() unless caller;

1;